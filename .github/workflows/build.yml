name: Test Build and Push

on:
  workflow_dispatch:  # 수동 실행용

jobs:
  test-build:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check environment
      run: |
        echo "=== Environment Check ==="
        echo "Current user: $(whoami)"
        echo "Kubectl version:"
        kubectl version --client
        echo ""
        echo "=== Namespace check ==="
        kubectl get namespace github-runner || echo "❌ Namespace github-runner not found"
        echo ""
        echo "=== Secret check ==="
        kubectl get secret harbor-docker-config -n github-runner || echo "❌ Harbor secret not found"
        echo ""
        echo "=== Node info ==="
        kubectl get nodes
        echo ""
        echo "=== Current directory ==="
        ls -la
        echo ""
        echo "=== File contents ==="
        echo "--- package.json ---"
        cat package.json
        echo "--- index.js ---"
        cat index.js
        echo "--- Dockerfile ---"
        cat Dockerfile
    
    - name: Generate build ID
      id: build-id
      run: |
        BUILD_ID=$(date +%Y%m%d-%H%M%S)-$(echo $GITHUB_SHA | head -c 8)
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_OUTPUT
        echo "Generated BUILD_ID: $BUILD_ID"
    
    - name: Create test ConfigMap
      run: |
        echo "Creating ConfigMap with build files..."
        
        # 기존 ConfigMap 정리
        kubectl delete configmap test-build-source-${{ steps.build-id.outputs.BUILD_ID }} \
          --namespace=github-runner --ignore-not-found=true
        
        # ConfigMap 생성
        kubectl create configmap test-build-source-${{ steps.build-id.outputs.BUILD_ID }} \
          --from-file=package.json \
          --from-file=index.js \
          --from-file=Dockerfile \
          --namespace=github-runner
          
        echo "✅ ConfigMap created successfully"
        
        # ConfigMap 내용 확인
        kubectl get configmap test-build-source-${{ steps.build-id.outputs.BUILD_ID }} -n github-runner -o yaml
    
    - name: Test Harbor connectivity
      run: |
        echo "Testing Harbor connectivity..."
        
        # Harbor ping 테스트
        if curl -k -f http://harbor.local/api/v2.0/systeminfo --connect-timeout 10; then
          echo "✅ Harbor is accessible via HTTP"
        elif curl -k -f https://harbor.local/api/v2.0/systeminfo --connect-timeout 10; then
          echo "✅ Harbor is accessible via HTTPS"
        else
          echo "❌ Harbor is not accessible"
          echo "Trying to resolve harbor.local..."
          nslookup harbor.local || echo "DNS resolution failed"
        fi
    
    - name: Create test Kaniko pod
      run: |
        echo "Creating Kaniko test pod..."
        
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: kaniko-test-${{ steps.build-id.outputs.BUILD_ID }}
          namespace: github-runner
        spec:
          restartPolicy: Never
          containers:
          - name: kaniko
            image: gcr.io/kaniko-project/executor:v1.15.0
            args:
            - "--context=/workspace"
            - "--dockerfile=/workspace/Dockerfile"
            - "--destination=harbor.local/library/my-app:test-${{ steps.build-id.outputs.BUILD_ID }}"
            - "--insecure"
            - "--skip-tls-verify"
            - "--verbosity=debug"
            - "--no-push"  # 실제 push 하지 않고 빌드만 테스트
            env:
            - name: DOCKER_CONFIG
              value: /kaniko/.docker
            volumeMounts:
            - name: docker-config
              mountPath: /kaniko/.docker
              readOnly: true
            - name: workspace
              mountPath: /workspace
          volumes:
          - name: docker-config
            secret:
              secretName: harbor-docker-config
              items:
              - key: .dockerconfigjson
                path: config.json
          - name: workspace
            configMap:
              name: test-build-source-${{ steps.build-id.outputs.BUILD_ID }}
        EOF
        
        echo "✅ Pod created"
    
    - name: Monitor test build
      run: |
        echo "Waiting for pod to start..."
        
        # Pod가 시작될 때까지 대기
        for i in {1..30}; do
          STATUS=$(kubectl get pod kaniko-test-${{ steps.build-id.outputs.BUILD_ID }} -n github-runner -o jsonpath='{.status.phase}' 2>/dev/null || echo "NotFound")
          echo "Attempt $i: Pod status = $STATUS"
          
          if [ "$STATUS" = "Running" ] || [ "$STATUS" = "Succeeded" ] || [ "$STATUS" = "Failed" ]; then
            break
          fi
          sleep 5
        done
        
        echo "=== Pod Description ==="
        kubectl describe pod kaniko-test-${{ steps.build-id.outputs.BUILD_ID }} -n github-runner
        
        echo "=== Pod Logs ==="
        kubectl logs kaniko-test-${{ steps.build-id.outputs.BUILD_ID }} -n github-runner || echo "No logs available yet"
        
        echo "=== Final Status ==="
        kubectl get pod kaniko-test-${{ steps.build-id.outputs.BUILD_ID }} -n github-runner
    
    - name: Cleanup test resources
      if: always()
      run: |
        echo "Cleaning up test resources..."
        kubectl delete pod kaniko-test-${{ steps.build-id.outputs.BUILD_ID }} -n github-runner --ignore-not-found=true
        kubectl delete configmap test-build-source-${{ steps.build-id.outputs.BUILD_ID }} -n github-runner --ignore-not-found=true
        echo "✅ Cleanup completed"