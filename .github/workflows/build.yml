name: Build and Push to Harbor (Docker)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  HARBOR_REGISTRY: "harbor.local"
  HARBOR_PROJECT: "library"

jobs:
  build:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate build ID
      id: build-id
      run: echo "BUILD_ID=$(date +%Y%m%d-%H%M%S)-$(echo $GITHUB_SHA | head -c 8)" >> $GITHUB_OUTPUT
    
    - name: Set up Docker environment
      run: |
        # Docker 버전 확인
        docker --version
        docker info
        
        # Harbor 연결 테스트
        curl -f "http://${{ env.HARBOR_REGISTRY }}/api/v2.0/systeminfo" || {
          echo "❌ Harbor not accessible"
          exit 1
        }
        echo "✅ Harbor accessible"
    
    - name: Login to Harbor
      run: |
        echo "Harbor12345!" | docker login ${{ env.HARBOR_REGISTRY }} \
          --username admin --password-stdin
        echo "✅ Logged in to Harbor"
    
    - name: Build Docker image
      run: |
        IMAGE_NAME="${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ github.event.repository.name }}"
        BUILD_TAG="${{ steps.build-id.outputs.BUILD_ID }}"
        
        echo "Building image: ${IMAGE_NAME}:${BUILD_TAG}"
        
        # Docker 이미지 빌드
        docker build -t "${IMAGE_NAME}:${BUILD_TAG}" .
        docker tag "${IMAGE_NAME}:${BUILD_TAG}" "${IMAGE_NAME}:latest"
        
        echo "✅ Image built successfully"
        echo "Built images:"
        docker images | grep "${{ github.event.repository.name }}"
    
    - name: Push to Harbor
      run: |
        IMAGE_NAME="${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ github.event.repository.name }}"
        BUILD_TAG="${{ steps.build-id.outputs.BUILD_ID }}"
        
        echo "Pushing images to Harbor..."
        
        # 이미지 푸시
        docker push "${IMAGE_NAME}:${BUILD_TAG}"
        docker push "${IMAGE_NAME}:latest"
        
        echo "✅ Images pushed successfully:"
        echo "  - ${IMAGE_NAME}:${BUILD_TAG}"
        echo "  - ${IMAGE_NAME}:latest"
    
    - name: Verify Harbor push
      run: |
        echo "Verifying image in Harbor..."
        
        # Harbor API로 이미지 확인
        REPO_NAME="${{ github.event.repository.name }}"
        curl -s -u admin:Harbor12345! \
          "http://${{ env.HARBOR_REGISTRY }}/api/v2.0/projects/${{ env.HARBOR_PROJECT }}/repositories/${REPO_NAME}/artifacts" \
          | jq -r '.[].tags[].name' 2>/dev/null || {
          echo "API verification failed, but push might be successful"
        }
    
    # GitOps 단계 추가
    - name: Checkout k8s-manifests repository
      uses: actions/checkout@v4
      with:
        repository: your-username/k8s-manifests  # 실제 GitHub 사용자명으로 변경
        token: ${{ secrets.GITOPS_TOKEN }}  # Personal Access Token 필요
        path: k8s-manifests
    
    - name: Update manifest files
      run: |
        IMAGE_NAME="${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ github.event.repository.name }}"
        BUILD_TAG="${{ steps.build-id.outputs.BUILD_ID }}"
        NEW_IMAGE="${IMAGE_NAME}:${BUILD_TAG}"
        
        echo "Updating manifests with new image: ${NEW_IMAGE}"
        
        # 환경별 배포 결정
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # main 브랜치 → prod 환경
          MANIFEST_PATH="k8s-manifests/applications/my-app2/prod/deployment.yaml"
          echo "🚀 Updating PRODUCTION environment"
        else
          # develop 브랜치 → dev 환경
          MANIFEST_PATH="k8s-manifests/applications/my-app2/dev/deployment.yaml"
          echo "🔧 Updating DEVELOPMENT environment"
        fi
        
        # deployment.yaml 파일에서 이미지 태그 업데이트
        sed -i "s|image: harbor\.local/library/my-app-2:.*|image: ${NEW_IMAGE}|g" ${MANIFEST_PATH}
        
        echo "✅ Manifest updated:"
        echo "File: ${MANIFEST_PATH}"
        echo "New image: ${NEW_IMAGE}"
        
        # 변경사항 확인
        cat ${MANIFEST_PATH} | grep "image:"
    
    - name: Commit and push manifest changes
      run: |
        cd k8s-manifests
        
        # Git 설정
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # 변경사항이 있는지 확인
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # 커밋 및 푸시
        BUILD_TAG="${{ steps.build-id.outputs.BUILD_ID }}"
        BRANCH_NAME="${{ github.ref_name }}"
        
        git add .
        git commit -m "Update my-app2 image to ${BUILD_TAG} from ${BRANCH_NAME} branch
        
        - Repository: ${{ github.repository }}
        - Commit: ${{ github.sha }}
        - Build ID: ${BUILD_TAG}"
        
        git push
        
        echo "✅ Manifest changes pushed to k8s-manifests repository"
    
    - name: Cleanup local images
      if: always()
      run: |
        IMAGE_NAME="${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ github.event.repository.name }}"
        BUILD_TAG="${{ steps.build-id.outputs.BUILD_ID }}"
        
        # 로컬 이미지 정리 (선택적)
        docker rmi "${IMAGE_NAME}:${BUILD_TAG}" "${IMAGE_NAME}:latest" || true
        
        echo "✅ Cleanup completed"